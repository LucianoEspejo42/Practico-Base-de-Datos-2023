ACTUALIZACI√ìN:
 -- Modifique la carga horaria del curso Ruby con el valor 60

update curso
set ch = 60 
where nom = 'Ruby'

 6. Elimine el curso Ruby
 
 No se puede realizar porque al tratar de eliminar el curso 'Ruby' 
 
 COSULTAS 
 
 -- 1) Correo y nombre de todas las personas

select correo, nombre
from persona 

-- 2) Nombre de los cursos.

select nom 
from curso

-- 3) Nombre del curso que tiene una carga horaria superior a la de todos los cursos que dicta
-- ‚Äúpedroiba√±ez@yahoo.com.ar‚Äù.
select nom
from curso
where ch > (
	select max(ch)
	from curso natural join dicta
	where correo = 'pedroiba√±ez@yahoo.com.ar');

-- 4)Datos (todos) de las personas (docentes o alumnos) que poseen como nombre Rosa (solamente o alguno de
-- ellos). 

select *
from persona 
where nombre like '%Rosa%'

-- 5) Nombres de los cursos que tienen una carga horaria superior a la del curso ‚ÄúKotlin I‚Äù.

select nom
from curso
where ch > (
	select ch
	from curso 
	where nom = 'Kotlin I');

-- 6) Cursos (todos los datos) cuya carga horaria sea superior a las 40 horas reloj.

SELECT *
FROM curso
where ch > 40

-- 7) Cursos (todos los datos) cuya carga horaria se encuentre entre 40 y 45 horas reloj.

select *
from curso
where ch > 40 and ch < 45

-- 8) Cursos (nombre renombrar como nombre curso) junto a los temas que se imparten.

select nom as nombre_curso, tema
from curso natural join tema

-- 9) Docentes (correo y nombre) que dictan cursos.

select distinct correo, nombre
from persona natural join dicta

-- 10) Cursos (nombre) junto a los datos del docente que los dicta.

select *
from dicta natural join persona natural join curso

-- 11) Cursos (todos los datos) junto a los datos de los alumnos inscriptos en ellos. Se deben incluir todos los cursos
-- registrados m√°s all√° que no tengan alumnos inscriptos

select *
from curso left join inscripcion on curso.nom = inscripcion.nom

-- ESTA MANERA ESTA BIEN  üëá

select * from curso left join (
    		select * from persona natural join inscripcion
		) as p on curso.nom = p.nom;


-- 12)  Docentes (todos los datos) que dictan los cursos ‚ÄúPython I‚Äù.

select persona.*
from dicta natural join persona
where nom = 'Python I'

-- 13) Docentes (todos los datos) que dictan los cursos ‚ÄúPython II‚Äù.

select persona.*
from dicta natural join persona
where nom = 'Python II'

-- 14) Docentes (correo y nombre) que dictan el curso ‚ÄúPython I‚Äù y/o ‚ÄúPython II‚Äù.

(select *
from dicta natural join persona
where nom = 'Python I') Union (select *
from dicta natural join persona
where nom = 'Python II')

--  Es LO MISMO 

select correo, nombre
from dicta natural join persona
where nom = 'Python II' or nom = 'Python I'

-- 15) Docentes (correo) que dictan los cursos ‚ÄúPython I‚Äù y ‚ÄúPython II‚Äù

(select correo
from dicta natural join persona
where nom = 'Python I') intersect (select correo
from dicta natural join persona
where nom = 'Python II')

-- 16) Docentes (todos los datos) que cursaron alg√∫n curso de verano

select *
from (select correo
from (select distinct correod as correo
from inscripcion) L natural join inscripcion) B natural join persona

-- 17) Alumnos (todos los datos) que se inscribieron en el curso ‚ÄúKotlin I‚Äù

select *
from (select correo
	from inscripcion
	where nom = 'Kotlin I')F natural join persona
	
-- 18)  Alumnos (todos los datos) que se inscribieron en el curso ‚ÄúKotlin II‚Äù

select *
from (select correo
	from inscripcion
	where nom = 'Kotlin II')F natural join persona

-- 19) Alumnos (correo) que se inscribieron tanto en el curso ‚ÄúKotlin I‚Äù como ‚ÄúKotlin II‚Äù.

(select correo
from inscripcion
where nom = 'Kotlin I') intersect (select correo
									from inscripcion
									where nom = 'Kotlin II')

-- 20) Alumnos (todos los datos) que aprobaron el curso ‚ÄúPython I‚Äù y ‚ÄúPython II‚Äù

select *
from ((select correo
	from inscripcion
	where nom = 'Python I' and nota > 6) 

	intersect 

	(select correo
	from inscripcion
	where nom = 'Python II' and nota > 7))M natural join persona

-- 21) Alumnos (Correo) que se inscribieron en m√°s de un curso de verano

select correo 
from inscripcion
group by correo
having count(correo) > 1

-- 22) Docentes (todos los datos) que dictan m√°s de un curso cuya carga horaria sea inferior a 30 horas reloj.

select * 
from	(select correo
		from dicta natural join curso
		where ch < 30
		group by correo
		having count(correo) > 1)A natural join persona


-- 23) Alumnos (correo) que cursaron los mismos cursos.

select distinct i1.correo
from inscripcion i1 inner join inscripcion i2 on i1.correo != i2.correo and i1.nom = i2.nom

-- 24) Alumnos que cursaron los mismos cursos con distinto profesor


select distinct i1.correo
from inscripcion i1 inner join inscripcion i2 on i1.correo != i2.correo and i1.nom = i2.nom and i1.correod != i2.correod

-- 25) Alumnos (todos los datos) que se inscribieron en todos los cursos de verano.

insert into inscripcion values ('anagarcia32@gmail.com','Kotlin I','pedroiba√±ez@yahoo.com.ar', 10),
							   ('anagarcia32@gmail.com', 'Kotlin II', 'pedroiba√±ez@yahoo.com.ar',8),
							   ('anagarcia32@gmail.com','Javascript I', 'pedroiba√±ez@yahoo.com.ar', 7),
							   ('anagarcia32@gmail.com', 'Javascript II', 'pedroiba√±ez@yahoo.com.ar', 7),
							   ('anagarcia32@gmail.com','Ruby', 'pedroiba√±ez@yahoo.com.ar',9);

select *
from persona p
where not exists (select *
				 from curso c
				 where not exists (select *
								  from inscripcion i
								  where c.nom = i.nom and i.correo = p.correo))
								  
-- 26) . Alumnos (todos los datos) que se inscribieron en todos los cursos que dicta el profesor con correo
-- ‚Äúpedroiba√±ez@yahoo.com.ar‚Äù 

select *
from persona p
where not exists (select *
				 from curso c
				 where not exists (select *
								  from inscripcion i
								  where p.correo = i.correo and i.correod = 'pedroiba√±ez@yahoo.com.ar'))
								  

-- 27) Nombre del/los curso/s que tienen la mayor carga horaria.

select nom
from curso
group by nom
having ch = (select max(ch)
			from curso)
			
-- OTRA MANERA 

select nom
from curso
where ch = (select max(ch)
		   from curso)


------------- TABLAS VIRTUALES/VISTAS -----------------------

-- 28) Especifique la Vista ‚ÄúCursoscortos‚Äù que tenga los siguientes atributos nombre, carga horaria. Los cursos
-- cortos son aquellos cuya carga horaria es inferior a las 40 horas.

create view Cursoscortos (nombre, cargahoraria)as 
select nom, ch 
from curso
where ch < 40

drop view Cursoscortos

-- 29) Muestre los datos contenidos en la vista, ordenados seg√∫n el nombre

select *
from Cursoscortos
order by nombre desc

-- 30) Inserte el curso ‚ÄúDBA PostgreSQL‚Äù con una carga horaria de 50 horas, a trav√©s de la vista.

insert into Cursoscortos values ('DBA PostgreSQL',50)

-- 31) Elimine la vista, y vuelva a crearla pero agregando la especificaci√≥n ‚ÄúWITH CHECK OPTION ‚Äù

drop view Cursoscortos

create view Cursoscortos_v2 (nombre, carga_horaria) as
select *
from curso
where ch < 40
WITH CHECK OPTION;

-- 32) Inserte el curso ‚ÄúDBA Oracle‚Äù con una carga horaria de 55 horas, a trav√©s de la vista.

insert into Cursoscortos_v2 values ('DBA Oracle',55)

-- 33) Especifique la Vista ‚ÄúAlumnos_python1‚Äù que tenga los siguientes atributos correo, nombre de usuario,
-- nombre y representan a los alumnos que se inscribieron en el curso ‚ÄúPYTHON I‚Äù.

create view Alumnos_python1 (correo, nom_usuario, nombre) as
select persona.*
from persona natural join inscripcion
where nom = 'Python I'

-- 34) Muestre los datos contenidos en la vista creada en el punto anterior, cuyo correo sea una cuenta de Gmail.

select *
from Alumnos_python1
where correo like '%gmail%'

-- 35) Especifique la Vista ‚ÄúAlumnos_python2‚Äù que tenga los siguientes atributos nombre de usuario, nombre y
-- representan a los alumnos que se inscribieron en el curso ‚ÄúPYTHON II‚Äù

create view Alumnos_python2 (nom_usuario, nombre) as
select nomu, nombre
from persona natural join inscripcion
where nom = 'Python II'

-- 36) Muestre los datos contenidos en la vista

select *
from Alumnos_python2

-- 37)  Inserte un nuevo alumno con los siguientes datos: < orm@gmail.com, or, Orlando Martin >

insert into Alumnos_python2 values ('orm@gmail.com','or','Orlando Martin')

---------------- GESTI√ìN DE USUARIO-----------------

-- 38) Cree un usuario (alumno) con contrase√±a ‚Äúalumno1‚Äù.

create user alumno password 'alumno1'

drop user alumnoLuciano

-- 39) Cambie su contrase√±a, por ‚Äúalumno‚Äù

alter user alumno with password 'alumno'

-- 40) Conc√©dale el permiso de SELECT e INSERT sobre la tabla CURSO. 

grant select on curso to alumno;
grant insert on curso to alumno;

-- 41) Visualice los permisos del usuario ‚Äúalumno‚Äù: SELECT table_name, privilege_type FROM
-- information_schema.table_privileges WHERE grantee = 'alumno'

SELECT table_name, privilege_type
FROM information_schema.table_privileges
WHERE grantee = 'alumno';

----------------------------------------- ESTO DE AQUI SE HACE EN EL USUARIO (ALUMNO) ---------------------------------------------------
-- 42) Accediendo con ese usuario (debe generar una nueva instancia que referencie al mismo servidor, pero con				|
-- el usuario ‚Äúalumno‚Äù), ejecute un SELECT sobre la tabla CURSO y luego, sobre la tabla DICTA. Analice las				|
-- respuestas																|
																	|
select *																|
from curso																|
																	|
select *																|
from dicta																|
																	|
-----------------------------------------------------------------------------------------------------------------------------------------

-- 43) Elimine el permiso SELECT sobre la tabla DICTA.

revoke select 
on curso
from alumno

-- 44) Visualice nuevamente los permisos del usuario ‚Äúalumno‚Äù.

SELECT table_name, privilege_type
FROM information_schema.table_privileges
WHERE grantee = 'alumno';


 
